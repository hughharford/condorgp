# to build through:
# DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile_nt_builder --target=runtime -t cgp_nt_plus_runtime .
## should be quick build and just adjust recently adjusted code
# reinstalls pika at the end, otherwise will not work

FROM ghcr.io/nautechsystems/nautilus_trader:latest AS cgp_nt_theirs_plus

# ENV PATH=/usr/local/bin:$PATH

# # http://bugs.python.org/issue19846
# # > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
# ENV LANG=C.UTF-8

# # set location to avoid hang on tzdata
# ENV TZ=Europe/London
# RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
# RUN apt-get update --fix-missing

# extra dependencies
## Q: is this all really required?
# # --no-install-recommends
RUN apt-get update \
  && apt-get install -y  \
    libbluetooth-dev \
    tk-dev \
    uuid-dev \
    apt-transport-https \
    jq \
    unzip \
    curl \
    wget \
    git \
    vim \
  ## A: taking this out
    # virtualenv \
    python3-pip \
  ## A: taking this out
    #  zsh \
    # tree \
    # gh \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    build-essential \
    net-tools \
    direnv \
    # python support packages
    make \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    llvm \
    libncursesw5-dev \
    # xz-utils
    tk-dev \
    libxml2-dev \
    libffi-dev \
    liblzma-dev \
    python3-dev \
    libncurses5-dev \
  && apt-get clean

RUN pip3 install numpy setuptools wheel six auditwheel poetry==1.8.4

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry \
    POETRY_HOME="/opt/poetry" \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="condorgp/.venv" \
    CGP_PATH="/condorgp"


ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"
    # additionals

# again (? it works) to go past issues:
RUN pip3 install --ignore-installed six

# this didn't work
WORKDIR $CGP_PATH

COPY pyproject.toml poetry.lock ./

# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
# this just ran:
  # RUN poetry install --without api
# rather than:
RUN poetry install --no-root --without api --without database --without cluster --without cloud --without test --without dev --without optional
# --without primary \
# --without evolution \
# --without comms \

COPY / ./
RUN touch README.md
# build as per Nautilus Trader dockerfile
RUN poetry build -f wheel
RUN python -m pip install ./dist/*whl --force --no-deps
RUN find /usr/local/lib/python3.12/site-packages -name "*.pyc" -exec rm -f {} \;

# tidy up
RUN rm -rf /var/cache/apt/* \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf $POETRY_CACHE_DIR

### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ##########################################################################


FROM python:3.12-slim AS runtime

# as from Nautilus Trader dockerfile
ENV PYTHON_SITE_PACKAGES="/usr/local/lib/python3.12/site-packages"
COPY --from=cgp_nt_theirs_plus $PYTHON_SITE_PACKAGES $PYTHON_SITE_PACKAGES
ENV PATH="$PYTHON_SITE_PACKAGES:$PATH"

WORKDIR /condorgp

RUN touch README.md

COPY . .

# ENTRYPOINT [ "poetry", "run" ]

CMD ["/bin/bash"]
