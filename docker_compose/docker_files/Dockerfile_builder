# from:
  # built and rabbitmq commands ran 250614

FROM ubuntu:22.04

ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# these get set in zsh but cause local error
# ENV LANG=en_US.UTF-8
# ENV LC_ALL=en_US.UTF-8

# set location to avoid hang on tzdata
ENV TZ=Europe/London
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get update

# extra dependencies (over what base already includes, was buildpack-deps, now ubuntu:20.04)
RUN apt-get update && apt-get install -y --no-install-recommends \
		apt-utils \
		libbluetooth-dev \
		tk-dev \
		uuid-dev \
	&& rm -rf /var/lib/apt/lists/*

# standard issue update && ...
RUN apt-get update && apt-get install -y apt-transport-https

# HSTH: STEPS to install a few extras
RUN apt-get install -y \
		unzip \
		curl \
		wget \
		virtualenv \
		python3-pip

######
######
#		INSTALL NOTES
######
######

# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# # make some useful symlinks that are expected to exist
 RUN cd /usr/local/bin \
 	&& ln -s idle3 idle \
 	&& ln -s pydoc3 pydoc \
 	&& ln -s python3 python \
 	&& ln -s python3-config python-config

############# PYTHON #########################################################
# ''''''''''''''' ############################# '''''''''''''''''' ####################

RUN apt-get install -y \
#  libreadline-gplv2-dev \
# TO DO: 250519 Need to understand why there was no candidate for libreadline-gplv2-dev
# and why it didn't matter on previous builds
  libgdbm-dev libc6-dev libbz2-dev

# further python support packages
RUN apt-get update; apt-get install -y make build-essential \
  libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
  libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev \
  libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
  python3-dev libncurses5-dev git

WORKDIR /home/user

ARG PYTHON_VERSION=3.12.7

# install pyenv and python
RUN git clone https://github.com/pyenv/pyenv.git .pyenv
ENV HOME  /home/user
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
RUN echo 'export PYENV_ROOT="$HOME/.pyenv"' >> .bashrc
RUN echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> .bashrc
RUN echo 'eval "$(pyenv init -)"' >> .bashrc
RUN pyenv install $PYTHON_VERSION

# install pyenv-virtualenv
RUN git clone https://github.com/yyuu/pyenv-virtualenv.git .pyenv/plugins/pyenv-virtualenv
RUN echo 'eval "$(pyenv virtualenv-init -)"' >> .bashrc

RUN pip3 install numpy setuptools wheel six auditwheel

############# PYTHON #########################################################
# ''''''''''''''' ############################# '''''''''''''''''' ####################

# TODO: check this ENVs are doing anything... tbc could well be but pinning versions?
ENV PYTHON_PIP_VERSION 22.2.1
# https://github.com/docker-library/python/issues/365
ENV PYTHON_SETUPTOOLS_VERSION 70.0.0
# was 57.0.0
# SETUPTOOLS version 70 indicated: https://pypi.org/project/setuptools/#history
# https://github.com/pypa/get-pip
ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/3cb8888cc2869620f57d5d2da64da38f516078c7/public/get-pip.py
ENV PYTHON_GET_PIP_SHA256 c518250e91a70d7b20cceb15272209a4ded2a0c263ae5776f129e0d9b5674309

# additional 24 05 23 quickly 2
RUN apt install -y curl git imagemagick jq unzip vim zsh tree gh make; \
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; \
  apt-get update; apt-get install direnv; \
  echo 'eval "$(direnv hook zsh)"' >> ~/.zshrc;

# again to go past issues:
RUN pip3 install --ignore-installed six

# install nautilus_trader
RUN mkdir $HOME/code/
RUN mkdir $HOME/code/nautilus_trader
RUN git clone --single-branch https://github.com/nautechsystems/nautilus_trader.git $HOME/code/nautilus_trader
WORKDIR $HOME/code/nautilus_trader

RUN pyenv virtualenv $PYTHON_VERSION naut_trader
RUN . /home/user/.pyenv/versions/naut_trader/bin/activate

# install nautilus_trader dependencies
# clang
RUN apt install -y clang
# rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH=${PATH}:$HOME/.cargo/bin

# TODO: tidy up pyenv usage here. see lines below PYENV_GLOBAL etc
# poetry
RUN . /home/user/.pyenv/versions/naut_trader/bin/activate && \
    curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="/home/user/.local/bin:$PATH"

RUN . /home/user/.pyenv/versions/naut_trader/bin/activate && \
    pip3 install toml Cython requests numpy setuptools

RUN . /home/user/.pyenv/versions/naut_trader/bin/activate && \
    poetry run python build.py

# GOT TO HERE SUCCESSFULLY 24 06 12 1430

WORKDIR $HOME/code/condorgp

# so python prints
ENV PYTHONUNBUFFERED=1

ENV PYENV_GLOBAL=naut_trader
RUN pyenv global ${PYENV_GLOBAL}
ENV PYENV_VERSION=naut_trader

#####
#   Condorgp code, which will update regularly, to be copied after this build
#   See Dockerfile_latest_<various>
#   Do this here, so install done once now, not many times later.
#   The latest copy is just the latest files.
#####

WORKDIR $HOME/code/
RUN . /home/user/.pyenv/versions/naut_trader/bin/activate && \
    git clone --single-branch https://github.com/hughharford/condorgp.git
WORKDIR $HOME/code/condorgp
RUN . /home/user/.pyenv/versions/naut_trader/bin/activate && \
    make install


WORKDIR $HOME/code/nautilus_trader
RUN pip install -U nautilus_trader

# GOT TO HERE SUCCESSFULLY 24 06 13 2137

# # #   ### dotfiles
# WORKDIR $HOME/code/
# RUN git clone https://github.com/hughharford/dotfiles.git
# WORKDIR $HOME/code/dotfiles
# RUN zsh install.sh

RUN apt install net-tools

ENV PATH="/usr/local/lib/python3.12/dist-packages:$PATH"
ENV PYTHONPATH="/usr/local/lib/python3.12/dist-packages:$PYTHONPATH"

# TODO: get this URL working with hostname not potentially changing URL
# check bridge status with:
  #                       docker network inspect bridge
# for rabbitmq
ENV AMQP_URL='amqp://172.17.0.3?connection_attempts=2&retry_delay=5'

# 5672 and 15672 already in use (by rabbitmq docker)
# EXPOSE 5672
# EXPOSE 15672

# will try to communicate via docker dns
# https://www.baeldung.com/ops/docker-communicating-with-containers-on-same-machine


WORKDIR $HOME/code/

COPY ./scripts/reclone_cgp.sh $HOME/code/
RUN chmod +x reclone_cgp.sh

WORKDIR $HOME/code/condorgp


# PUT TO BEGINNING asap
RUN poetry install \
   && poetry remove file-read-backwards pika \
   && poetry add file-read-backwards pika


# for -it interactive running
CMD ["/bin/bash"]

# worker, on docker
# CMD ["python3", "condorgp/comms/run_condorgp/cgp_w_d.py"]

# command, on docker
# CMD ["python3", "condorgp/comms/run_condorgp/cgp_cmd_d.py"]
